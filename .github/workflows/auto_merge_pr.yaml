name: Auto-merge PR
on:
  pull_request_review:
  check_suite:
    types: [completed]


jobs:
  merge-pr:
    name: Merge PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.2.0
        with:
          github-token: ${{github.token}}
          script: |
            console.log(context.payload)
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            if (context.payload.pull_request) {
              const pullNumber = context.payload.pull_request.number;
            } else if (context.payload.check_suite) {
              process.exit(1);
              const pullNumber = context.payload.check_suite.pull_requests[0].number;
            };

            github.pulls.get({owner: owner, repo: repo, pull_number: pullNumber})
              .then(pr => {
                // https://developer.github.com/v4/enum/mergestatestatus/
                // "unstable" is OK because it means that this check hasn't finished,
                // which of course is expected.
                if (["clean", "unstable"].includes(pr.data.mergeable_state)) {
                  github.pulls.merge({owner: owner, repo: repo, pull_number: pullNumber});
                } else {
                  console.log(`
                  This PR is not in a mergeable state!
                  Current state: '${pr.data.mergeable_state}'
                  See https://developer.github.com/v4/enum/mergestatestatus/ for more details.
                  `)
                  process.exit(1)
                }
              }
            )

  delete-branch:
    name: Delete Branch
    # Only attempt to delete the branch if the PR has been merged
    needs: merge-pr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.2.0
        with:
          github-token: ${{github.token}}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let pullNumber = context.payload.pull_request.number;

             github.pulls.get({owner: owner, repo: repo, pull_number: pullNumber})
            .then(pr => {
              github.git.deleteRef({owner: owner, repo: repo, ref: `heads/${pr.data.head.ref}`});
            });
